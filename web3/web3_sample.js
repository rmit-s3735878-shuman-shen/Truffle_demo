const Tx = require("ethereumjs-tx").Transaction;
const Web3 = require("web3");
const abi = require("./contract_abi");

const url = "https://mainnet.infura.io/v3/4acd0c63fb6c4291951a8aad492312b7";
const test_url =
  "https://ropsten.infura.io/v3/4acd0c63fb6c4291951a8aad492312b7";
const ganache = "HTTP://127.0.0.1:7545";
const web3 = new Web3(test_url);

const contractAddress = "0xd26114cd6EE289AccF82350c8d8487fedB8A0C07";

const account1 = "0x23c9DD8695A603BD31D401a7Ffc34588F13B9729";
const account2 = "0xfbA41cCE8D9C566eDbb7d6201100ee97e63E6fc2";

// !!! exclude '0x' at the beginning of the private key
let private1 =
  "86430438a945b280a660542d9b0aba5506fc83b8b3cc36575a9657295cdff8ac";
private1 = Buffer.from(private1, "hex");

const contract = new web3.eth.Contract(abi); //, contractAddress
const deployData = contract
  .deploy({
    data:
      "0x6080604052336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600060055534801561005557600080fd5b506040516109733803806109738339818101604052606081101561007857600080fd5b8101908080519060200190929190805190602001909291908051906020019092919050505082600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555081600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080670de0b6b3a764000002600181905550505050610831806101426000396000f3fe60806040526004361061004a5760003560e01c8063123119cd1461004f5780638c1e368b146100a6578063a5a99a7c146100bd578063b69ef8a814610226578063d8d7970014610251575b600080fd5b34801561005b57600080fd5b5061006461025b565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156100b257600080fd5b506100bb610281565b005b3480156100c957600080fd5b50610224600480360360608110156100e057600080fd5b81019080803590602001906401000000008111156100fd57600080fd5b82018360208201111561010f57600080fd5b8035906020019184600183028401116401000000008311171561013157600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509192919290803590602001909291908035906020019064010000000081111561019e57600080fd5b8201836020820111156101b057600080fd5b803590602001918460018302840111640100000000831117156101d257600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050919291929050505061034d565b005b34801561023257600080fd5b5061023b6104c5565b6040518082815260200191505060405180910390f35b6102596104cb565b005b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610343576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260168152602001807f53656e646572206e6f7420617574686f72697a65642e0000000000000000000081525060200191505060405180910390fd5b6000600181905550565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461040f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260168152602001807f53656e646572206e6f7420617574686f72697a65642e0000000000000000000081525060200191505060405180910390fd5b60016005600082825401925050819055506040518060800160405280848152602001838152602001828152602001600015158152506004600060055481526020019081526020016000206000820151816000019080519060200190610475929190610735565b5060208201518160010155604082015181600201908051906020019061049c929190610735565b5060608201518160030160006101000a81548160ff021916908315150217905550905050505050565b60015481565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461058d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260168152602001807f53656e646572206e6f7420617574686f72697a65642e0000000000000000000081525060200191505060405180910390fd5b6001543411156105e8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260228152602001806107db6022913960400191505060405180910390fd5b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc349081150290604051600060405180830381858888f19350505050158015610650573d6000803e3d6000fd5b5061065a34610722565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f7db7852b30fc413c4a90995f03d9f21e64c45d0ddc8324a8ce4c730a051cbf82600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1634604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019250505060405180910390a2565b8060016000828254039250508190555050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061077657805160ff19168380011785556107a4565b828001600101855582156107a4579182015b828111156107a3578251825591602001919060010190610788565b5b5090506107b191906107b5565b5090565b6107d791905b808211156107d35760008160009055506001016107bb565b5090565b9056fe496e73756666696369656e742066756e6420666f7220746865207061796d656e742ea265627a7a723158209e0af2b78be0be7a0217f004ac4337a8a1374f6a7f65db6148aa2d5da2356a4c64736f6c634300050b0032",
    arguments: [account1, account2, 1]
  })
  .encodeABI();

async function sendTransaction() {
  const transRecord = await web3.eth.sendTransaction({
    from: account1,
    to: account2,
    value: web3.utils.toWei("1", "ether")
  });
  console.log(transRecord);
}

// Promise Example
// web3.eth
//   .getBalance(address)
//   .then(bal => console.log(bal))
//   .catch(err => console.log(err.message));

async function getBalance(_address) {
  let balance = await web3.eth.getBalance(_address);
  balance = web3.utils.fromWei(balance, "ether");
  console.log("Address: " + _address + "\nBalance: " + balance + " ether");
}

async function getContractName(_contract) {
  const name = await _contract.methods.name().call();
  console.log(name);
}

function createAccount() {
  console.log(web3.eth.accounts.create());
}

async function signTransaction() {
  // create transaction object
  const txCount = await web3.eth.getTransactionCount(account1);
  const txObject = {
    nonce: web3.utils.toHex(txCount),
    to: account2,
    value: web3.utils.toHex(5000000000),
    gasLimit: web3.utils.toHex(21000),
    gasPrice: web3.utils.toHex(web3.utils.toWei("10", "gwei"))
  };

  // sign the transaction
  const tx = new Tx(txObject, { chain: "ropsten", hardfork: "petersburg" });
  tx.sign(private1);
  const serializedTrans = tx.serialize();
  const raw = "0x" + serializedTrans.toString("hex");

  // broadcast the transaction
  const txHash = await web3.eth.sendSignedTransaction(raw);
  console.log(txHash);
}

async function deployContract() {
  // create transaction object
  const txCount = await web3.eth.getTransactionCount(account1);
  console.log(txCount);
  const txObject = {
    nonce: web3.utils.toHex(txCount),
    gasLimit: web3.utils.toHex(1000000),
    gasPrice: web3.utils.toHex(web3.utils.toWei("10", "gwei")),
    data: deployData
  };

  // sign the transaction
  const tx = new Tx(txObject, { chain: "ropsten", hardfork: "petersburg" });
  tx.sign(private1);
  const serializedTrans = tx.serialize();
  const raw = "0x" + serializedTrans.toString("hex");
  //console.log(raw);

  // broadcast the transaction
  const txHash = await web3.eth.sendSignedTransaction(raw);
  console.log(txHash);
}

//sendTransaction();
//getBalance(account1);
//getBalance(account2);
//getContractName(contract);
//createAccount();
//deployContract();
